{
  "problems": [
    {
      "id": "ruby/queen-attack",
      "track_id": "ruby",
      "language": "Ruby",
      "slug": "queen-attack",
      "name": "Queen Attack",
      "files": {
        "queen_attack_test.rb": "require 'minitest/autorun'\nrequire_relative 'queen_attack'\n\nclass QueensTest < Minitest::Test\n  def test_default_positions\n    queens = Queens.new\n    assert_equal [0, 3], queens.white\n    assert_equal [7, 3], queens.black\n  end\n\n  def test_specific_placement\n    skip\n    queens = Queens.new(white: [3, 7], black: [6, 1])\n    assert_equal [3, 7], queens.white\n    assert_equal [6, 1], queens.black\n  end\n\n  def test_multiple_boards_simultaneously\n    skip\n    queens1 = Queens.new(white: [3, 7], black: [6, 1])\n    queens2 = Queens.new(white: [5, 4], black: [7, 7])\n    assert_equal [3, 7], queens1.white\n    assert_equal [6, 1], queens1.black\n    assert_equal [5, 4], queens2.white\n    assert_equal [7, 7], queens2.black\n  end\n\n  def test_cannot_occupy_same_space\n    skip\n    assert_raises ArgumentError do\n      Queens.new(white: [2, 4], black: [2, 4])\n    end\n  end\n\n  def test_string_representation # rubocop:disable Metrics/MethodLength\n    skip\n    queens = Queens.new(white: [2, 4], black: [6, 6])\n    board = <<-BOARD.chomp\n_ _ _ _ _ _ _ _\n_ _ _ _ _ _ _ _\n_ _ _ _ W _ _ _\n_ _ _ _ _ _ _ _\n_ _ _ _ _ _ _ _\n_ _ _ _ _ _ _ _\n_ _ _ _ _ _ B _\n_ _ _ _ _ _ _ _\n    BOARD\n    assert_equal board, queens.to_s\n  end\n\n  def test_another_string_representation # rubocop:disable Metrics/MethodLength\n    skip\n    queens = Queens.new(white: [7, 1], black: [0, 0])\n    board = <<-BOARD.chomp\nB _ _ _ _ _ _ _\n_ _ _ _ _ _ _ _\n_ _ _ _ _ _ _ _\n_ _ _ _ _ _ _ _\n_ _ _ _ _ _ _ _\n_ _ _ _ _ _ _ _\n_ _ _ _ _ _ _ _\n_ W _ _ _ _ _ _\n    BOARD\n    assert_equal board, queens.to_s\n  end\n\n  # rubocop:disable Metrics/MethodLength\n  def test_yet_another_string_representation\n    skip\n    queens = Queens.new(white: [4, 3], black: [3, 4])\n    board = <<-BOARD.chomp\n_ _ _ _ _ _ _ _\n_ _ _ _ _ _ _ _\n_ _ _ _ _ _ _ _\n_ _ _ _ B _ _ _\n_ _ _ W _ _ _ _\n_ _ _ _ _ _ _ _\n_ _ _ _ _ _ _ _\n_ _ _ _ _ _ _ _\n    BOARD\n    assert_equal board, queens.to_s\n  end\n\n  def test_cannot_attack\n    skip\n    queens = Queens.new(white: [2, 3], black: [4, 7])\n    assert !queens.attack?\n  end\n  # rubocop:enable Metrics/MethodLength\n\n  def test_can_attack_on_same_row\n    skip\n    queens = Queens.new(white: [2, 4], black: [2, 7])\n    assert queens.attack?\n  end\n\n  def test_can_attack_on_same_column\n    skip\n    queens = Queens.new(white: [5, 4], black: [2, 4])\n    assert queens.attack?\n  end\n\n  def test_can_attack_on_diagonal\n    skip\n    queens = Queens.new(white: [1, 1], black: [6, 6])\n    assert queens.attack?\n  end\n\n  def test_can_attack_on_other_diagonal\n    skip\n    queens = Queens.new(white: [0, 6], black: [1, 7])\n    assert queens.attack?\n  end\n\n  def test_can_attack_on_yet_another_diagonal\n    skip\n    queens = Queens.new(white: [4, 1], black: [6, 3])\n    assert queens.attack?\n  end\n\n  def test_can_attack_on_a_diagonal_slanted_the_other_way\n    skip\n    queens = Queens.new(white: [6, 1], black: [1, 6])\n    assert queens.attack?\n  end\nend\n",
        "README.md": "# Queen Attack\n\nWrite a program that positions two queens on a chess board and indicates whether or not they are positioned so that they can attack each other.\n\nIn the game of chess, a queen can attack pieces which are on the same\nrow, column, or diagonal.\n\nA chessboard can be represented by an 8 by 8 array.\n\nSo if you're told the white queen is at (2, 3) and the black queen at\n(5, 6), then you'd know you've got a set-up like so:\n\n```plain\n_ _ _ _ _ _ _ _\n_ _ _ _ _ _ _ _\n_ _ _ W _ _ _ _\n_ _ _ _ _ _ _ _\n_ _ _ _ _ _ _ _\n_ _ _ _ _ _ B _\n_ _ _ _ _ _ _ _\n_ _ _ _ _ _ _ _\n```\n\nYou'd also be able to answer whether the queens can attack each other.\nIn this case, that answer would be yes, they can, because both pieces\nshare a diagonal.\n\nRefer exercism help page at http://help.exercism.io/getting-started-with-ruby.html for ruby installation and learning resources.\n\nFor running the tests provided, you will need the Minitest gem. Open a terminal window and run the following command to install minitest:\n\n    gem install minitest\n\n## Source\n\nJ Dalbey's Programming Practice problems [view source](http://users.csc.calpoly.edu/~jdalbey/103/Projects/ProgrammingPractice.html)\n"
      },
      "fresh": false
    }
  ]
}
