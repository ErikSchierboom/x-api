{
  "problems": [
    {
      "id": "php/Trinary",
      "track_id": "php",
      "slug": "Trinary",
      "files": {
        "TrinaryTest.php": "<?php\nnamespace Exercism\\Trinary;\n\nclass TrinaryTest extends \\PHPUnit_Framework_TestCase\n{\n    public function test1IsDecimal1()\n    {\n        $trinary = new Trinary('1');\n        $this->assertEquals(1, $trinary->toDecimal());\n    }\n\n    /** @group skipped */\n    public function test2IsDecimal2()\n    {\n        $trinary = new Trinary('2');\n        $this->assertEquals(2, $trinary->toDecimal());\n    }\n\n    /** @group skipped */\n    public function test10IsDecimal3()\n    {\n        $trinary = new Trinary('10');\n        $this->assertEquals(3, $trinary->toDecimal());\n    }\n\n    /** @group skipped */\n    public function test11IsDecimal4()\n    {\n        $trinary = new Trinary('11');\n        $this->assertEquals(4, $trinary->toDecimal());\n    }\n\n    /** @group skipped */\n    public function test100IsDecimal9()\n    {\n        $trinary = new Trinary('100');\n        $this->assertEquals(9, $trinary->toDecimal());\n    }\n\n    /** @group skipped */\n    public function test112IsDecimal14()\n    {\n        $trinary = new Trinary('112');\n        $this->assertEquals(14, $trinary->toDecimal());\n    }\n\n    /** @group skipped */\n    public function test222IsDecimal26()\n    {\n        $trinary = new Trinary('222');\n        $this->assertEquals(26, $trinary->toDecimal());\n    }\n\n    /** @group skipped */\n    public function test1122000120IsDecimal32091()\n    {\n        $trinary = new Trinary('1122000120');\n        $this->assertEquals(32091, $trinary->toDecimal());\n    }\n\n    /** @group skipped */\n    public function testInvalidTrinaryIsDecimal0()\n    {\n        $trinary = new Trinary('carrot');\n        $this->assertEquals(0, $trinary->toDecimal());\n    }\n}\n",
        "README.md": "# Trinary\n\nWrite a program that will convert a trinary number, represented as a string (e.g. '102012'), to its decimal equivalent using first principles.\n\nThe program should consider strings specifying an invalid trinary as the value 0.\n\nTrinary numbers contain three symbols: 0, 1, and 2.\n\nThe last place in a trinary number is the 1's place. The second to last is the 3's place, the third to last is the 9's place, etc.\n\n```bash\n# \"102012\"\n    1       0       2       0       1       2    # the number\n1*3^5 + 0*3^4 + 2*3^3 + 0*3^2 + 1*3^1 + 2*3^0    # the value\n  243 +     0 +    54 +     0 +     3 +     2 =  302\n```\n\n## Making the Test Suite Pass\n\nFirst [get composer](https://getcomposer.org/download/) and fetch [PHPUnit](http://phpunit.de/):\n\n```bash\n$ curl -sS https://getcomposer.org/installer | php\n$ php composer.phar install\n```\n\nExecute the tests with:\n\n```bash\n$ php vendor/bin/phpunit Trinary\n```\n\nAll but the first test have been skipped.\n\nOnce you get a test passing, you can unskip the next one by removing the `@group` annotation, e.g:\n\n```php\n/** @group skipped */\npublic function testFoo() { ... }\n```\n\nbecomes:\n\n```php\npublic function testFoo() { ... }\n```\n\n## Source\n\nAll of Computer Science [view source](http://www.wolframalpha.com/input/?i=binary&a=*C.binary-_*MathWorld-)\n"
      },
      "fresh": true
    },
    {
      "id": "php/Wordy",
      "track_id": "php",
      "slug": "Wordy",
      "files": {
        "ArgumentError.php": "<?php\nnamespace Exercism\\Wordy;\n\nclass ArgumentError extends \\InvalidArgumentException\n{\n}\n",
        "WordProblemTest.php": "<?php\nnamespace Exercism\\Wordy;\n\nclass WordProblemTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testAdd1()\n    {\n        $problem = new WordProblem('What is 1 plus 1?');\n        $this->assertEquals(2, $problem->answer());\n    }\n\n    /** @group skipped */\n    public function testAdd2()\n    {\n        $problem = new WordProblem('What is 53 plus 2?');\n        $this->assertEquals(55, $problem->answer());\n    }\n\n    /** @group skipped */\n    public function testAddNegativeNumbers()\n    {\n        $problem = new WordProblem('What is -1 plus -10?');\n        $this->assertEquals(-11, $problem->answer());\n    }\n\n    /** @group skipped */\n    public function testAddMoreDigits()\n    {\n        $problem = new WordProblem('What is 123 plus 45678?');\n        $this->assertEquals(45801, $problem->answer());\n    }\n\n    /** @group skipped */\n    public function testSubtract()\n    {\n        $problem = new WordProblem('What is 4 minus -12?');\n        $this->assertEquals(16, $problem->answer());\n    }\n\n    /** @group skipped */\n    public function testMultiply()\n    {\n        $problem = new WordProblem('What is -3 multiplied by 25?');\n        $this->assertEquals(-75, $problem->answer());\n    }\n\n    /** @group skipped */\n    public function testDivide()\n    {\n        $problem = new WordProblem('What is 33 divided by -3?');\n        $this->assertEquals(-11, $problem->answer());\n    }\n\n    /** @group skipped */\n    public function testAddTwice()\n    {\n        $problem = new WordProblem('What is 1 plus 1 plus 1?');\n        $this->assertEquals(3, $problem->answer());\n    }\n\n    /** @group skipped */\n    public function testAddThenSubtract()\n    {\n        $problem = new WordProblem('What is 1 plus 5 minus -2?');\n        $this->assertEquals(8, $problem->answer());\n    }\n\n    /** @group skipped */\n    public function testSubtractTwice()\n    {\n        $problem = new WordProblem('What is 20 minus 4 minus 13?');\n        $this->assertEquals(3, $problem->answer());\n    }\n\n    /** @group skipped */\n    public function testSubtractThenAdd()\n    {\n        $problem = new WordProblem('What is 17 minus 6 plus 3?');\n        $this->assertEquals(14, $problem->answer());\n    }\n\n    /** @group skipped */\n    public function testMultiplyTwice()\n    {\n        $problem = new WordProblem('What is 2 multiplied by -2 multiplied by 3?');\n        $this->assertEquals(-12, $problem->answer());\n    }\n\n    /** @group skipped */\n    public function testAddThenMultiply()\n    {\n        $problem = new WordProblem('What is -3 plus 7 multiplied by -2?');\n        $this->assertEquals(-8, $problem->answer());\n    }\n\n    /** @group skipped */\n    public function testDivideTwice()\n    {\n        $problem = new WordProblem('What is -12 divided by 2 divided by -3?');\n        $this->assertEquals(2, $problem->answer());\n    }\n\n    /** @group skipped */\n    public function testTooAdvanced()\n    {\n        $this->setExpectedException('Exercism\\Wordy\\ArgumentError');\n\n        $problem = new WordProblem('What is 53 cubed?');\n        $problem->answer();\n    }\n\n    /** @group skipped */\n    public function testIrrelevant()\n    {\n        $this->setExpectedException('Exercism\\Wordy\\ArgumentError');\n\n        $problem = new WordProblem('Who is the president of the United States?');\n        $problem->answer();\n    }\n}\n",
        "README.md": "# Wordy\n\nWrite a program that takes a word problem and returns the answer as an integer.\n\n## Step 1\n\nE.g.\n\n> What is 5 plus 13?\n\nThe program should handle large numbers and negative numbers.\n\nUse the tests to drive your solution by deleting the `skip` in one test at a time.\n\n## Step 2\n\nE.g.\n\n> What is 5 plus 13?\n\n> What is 7 minus 5?\n\n> What is 6 multiplied by 4?\n\n> What is 25 divided by 5?\n\n## Step 3\n\nE.g.\n\n> What is 5 plus 13 plus 6?\n\n> What is 7 minus 5 minus 1?\n\n> What is 9 minus 3 plus 5?\n\n> What is 3 plus 5 minus 8?\n\n## Step 4\n\nE.g.\n\n> What is 5 plus 13?\n\n> What is 7 minus 5?\n\n> What is 6 times 4?\n\n> What is 25 divided by 5?\n\n> What is 78 plus 5 minus 3?\n\n> What is 18 times 3 plus 16?\n\n> What is 4 times 3 divided by 6?\n\n> What is 4 plus 3 times 2?\n\n## Extensions\n\nImplement questions of the type:\n\n> What is 2 raised to the 5th power?\n\nRemember to write failing tests for this code.\n\n## Making the Test Suite Pass\n\nFirst [get composer](https://getcomposer.org/download/) and fetch [PHPUnit](http://phpunit.de/):\n\n```bash\n$ curl -sS https://getcomposer.org/installer | php\n$ php composer.phar install\n```\n\nExecute the tests with:\n\n```bash\n$ php vendor/bin/phpunit Trinary\n```\n\nAll but the first test have been skipped.\n\nOnce you get a test passing, you can unskip the next one by removing the `@group` annotation, e.g:\n\n```php\n/** @group skipped */\npublic function testFoo() { ... }\n```\n\nbecomes:\n\n```php\npublic function testFoo() { ... }\n```\n\n## Source\n\nInspired by one of the generated questions in the Extreme Startup game. [view source](https://github.com/rchatley/extreme_startup)\n"
      },
      "fresh": true
    },
    {
      "id": "php/Clock",
      "track_id": "php",
      "slug": "Clock",
      "files": {
        "ClockTest.php": "<?php\nnamespace Exercism\\Clock;\n\nclass ClockTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testOnTheHour()\n    {\n        $clock = new Clock(8);\n\n        $this->assertEquals('08:00', $clock->__toString());\n    }\n\n    /** @group skipped */\n    public function testPastTheHour()\n    {\n        $clock = new Clock(11, 9);\n\n        $this->assertEquals('11:09', $clock->__toString());\n    }\n\n    /** @group skipped */\n    public function testAddingAFewMinutes()\n    {\n        $clock = new Clock(10);\n\n        $clock = $clock->add(3);\n\n        $this->assertEquals('10:03', $clock->__toString());\n    }\n\n    /** @group skipped */\n    public function testAddingOverAnHour()\n    {\n        $clock = new Clock(10);\n\n        $clock = $clock->add(61);\n\n        $this->assertEquals('11:01', $clock->__toString());\n    }\n\n    /** @group skipped */\n    public function testWrapAroundAtMidnight()\n    {\n        $clock = new Clock(23, 30);\n\n        $clock = $clock->add(60);\n\n        $this->assertEquals('00:30', $clock->__toString());\n    }\n\n    /** @group skipped */\n    public function testSubtractMinutes()\n    {\n        $clock = new Clock(10);\n\n        $clock = $clock->sub(90);\n\n        $this->assertEquals('08:30', $clock->__toString());\n    }\n\n    /** @group skipped */\n    public function testWrapAroundBackwards()\n    {\n        $clock = new Clock(0, 30);\n\n        $clock = $clock->sub(60);\n\n        $this->assertEquals('23:30', $clock->__toString());\n    }\n\n    /** @group skipped */\n    public function testWrapAroundDay()\n    {\n        $clock = new Clock(5, 32);\n\n        $clock = $clock->add(25 * 60);\n\n        $this->assertEquals('06:32', $clock->__toString());\n    }\n\n    /** @group skipped */\n    public function testWrapAroundDayBackwards()\n    {\n        $clock = new Clock(5, 32);\n\n        $clock = $clock->sub(25 * 60);\n\n        $this->assertEquals('04:32', $clock->__toString());\n    }\n\n    /** @group skipped */\n    public function testEquivalentClocks()\n    {\n        $this->assertEquals(new Clock(15, 37), new Clock(15, 37));\n    }\n\n    /** @group skipped */\n    public function testInequivalentClocks()\n    {\n        $this->assertNotEquals(new Clock(01, 01), new Clock(18, 32));\n    }\n}\n",
        "README.md": "# Clock\n\nImplement a clock that handles times without dates.\n\nCreate a clock that is independent of date.\n\nYou should be able to add and subtract minutes to it.\n\nTwo clocks that represent the same time should be equal to each other.\n\n## Making the Test Suite Pass\n\nFirst [get composer](https://getcomposer.org/download/) and fetch [PHPUnit](http://phpunit.de/):\n\n```bash\n$ curl -sS https://getcomposer.org/installer | php\n$ php composer.phar install\n```\n\nExecute the tests with:\n\n```bash\n$ php vendor/bin/phpunit Trinary\n```\n\nAll but the first test have been skipped.\n\nOnce you get a test passing, you can unskip the next one by removing the `@group` annotation, e.g:\n\n```php\n/** @group skipped */\npublic function testFoo() { ... }\n```\n\nbecomes:\n\n```php\npublic function testFoo() { ... }\n```\n\n## Source\n\nPairing session with Erin Drummond [view source](https://twitter.com/ebdrummond)\n"
      },
      "fresh": true
    },
    {
      "id": "php/Hamming",
      "track_id": "php",
      "slug": "Hamming",
      "files": {
        "HammingComparatorTest.php": "<?php\nnamespace Exercism\\Hamming;\n\nclass HammingComparatorTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testNoDifferenceBetweenIdenticalStrands()\n    {\n        $this->assertEquals(0, HammingComparator::distance('A', 'A'));\n    }\n\n    /** @group skipped */\n    public function testCompleteHammingDistanceOfForSingleNucleotideStrand()\n    {\n        $this->assertEquals(1, HammingComparator::distance('A', 'G'));\n    }\n\n    /** @group skipped */\n    public function testCompleteHammingDistanceForSmallStrand()\n    {\n        $this->assertEquals(2, HammingComparator::distance('AG', 'CT'));\n    }\n\n    /** @group skipped */\n    public function testSmallHammingDistance()\n    {\n        $this->assertEquals(1, HammingComparator::distance('AT', 'CT'));\n    }\n\n    /** @group skipped */\n    public function testSmallHammingDistanceInLongerStrand()\n    {\n        $this->assertEquals(1, HammingComparator::distance('GGACG', 'GGTCG'));\n    }\n\n    /** @group skipped */\n    public function testIgnoresExtraLengthOnFirstStrandWhenLonger()\n    {\n        $this->assertEquals(1, HammingComparator::distance('AGAGACTTA', 'AAA'));\n    }\n\n    /** @group skipped */\n    public function testIgnoresExtraLengthOnOtherStrandWhenLonger()\n    {\n        $this->assertEquals(2, HammingComparator::distance('AGG', 'AAAACTGACCCACCCCAGG'));\n    }\n\n    /** @group skipped */\n    public function testLargeHammingDistance()\n    {\n        $this->assertEquals(4, HammingComparator::distance('GATACA', 'GCATAA'));\n    }\n\n    /** @group skipped */\n    public function testHammingDistanceInVeryLongStrand()\n    {\n        $this->assertEquals(9, HammingComparator::distance('GGACGGATTCTG', 'AGGACGGATTCT'));\n    }\n}\n",
        "README.md": "# Hamming\n\nWrite a program that can calculate the Hamming difference between two DNA strands.\n\nA mutation is simply a mistake that occurs during the creation or copying of a nucleic acid, in particular DNA. Because nucleic acids are vital to cellular functions, mutations tend to cause a ripple effect throughout the cell. Although mutations are technically mistakes, a very rare mutation may equip the cell with a beneficial attribute. In fact, the macro effects of evolution are attributable by the accumulated result of beneficial microscopic mutations over many generations.\n\nThe simplest and most common type of nucleic acid mutation is a point mutation, which replaces one base with another at a single nucleotide.\n\nBy counting the number of differences between two homologous DNA strands taken from different genomes with a common ancestor, we get a measure of the minimum number of point mutations that could have occurred on the evolutionary path between the two strands.\n\nThis is called the 'Hamming distance'\n\n    GAGCCTACTAACGGGAT\n    CATCGTAATGACGGCCT\n    ^ ^ ^  ^ ^    ^^\n\nThe Hamming distance between these two DNA strands is 7.\n\n\n## Making the Test Suite Pass\n\nFirst [get composer](https://getcomposer.org/download/) and fetch [PHPUnit](http://phpunit.de/):\n\n```bash\n$ curl -sS https://getcomposer.org/installer | php\n$ php composer.phar install\n```\n\nExecute the tests with:\n\n```bash\n$ php vendor/bin/phpunit Trinary\n```\n\nAll but the first test have been skipped.\n\nOnce you get a test passing, you can unskip the next one by removing the `@group` annotation, e.g:\n\n```php\n/** @group skipped */\npublic function testFoo() { ... }\n```\n\nbecomes:\n\n```php\npublic function testFoo() { ... }\n```\n\n## Source\n\nThe Calculating Point Mutations problem at Rosalind [view source](http://rosalind.info/problems/hamm/)\n"
      },
      "fresh": true
    },
    {
      "id": "php/Leap",
      "track_id": "php",
      "slug": "Leap",
      "files": {
        "YearTest.php": "<?php\nnamespace Exercism\\Leap;\n\nclass YearTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testLeapYear()\n    {\n        $this->assertTrue((new Year(1996))->isLeap());\n    }\n\n    /** @group skipped */\n    public function testNonLeapYear()\n    {\n        $this->assertFalse((new Year(1997))->isLeap());\n    }\n\n    /** @group skipped */\n    public function testNonLeapEvenYear()\n    {\n        $this->assertFalse((new Year(1998))->isLeap());\n    }\n\n    /** @group skipped */\n    public function testCentury()\n    {\n        $this->assertFalse((new Year(1900))->isLeap());\n    }\n\n    /** @group skipped */\n    public function testFourthCentury()\n    {\n        $this->assertTrue((new Year(2400))->isLeap());\n    }\n}\n",
        "README.md": "# Leap\n\nWrite a program that will take a year and report if it is a leap year.\n\nThe tricky thing here is that a leap year occurs:\n\n```plain\non every year that is evenly divisible by 4\n  except every year that is evenly divisible by 100\n    unless the year is also evenly divisible by 400\n```\n\nFor example, 1997 is not a leap year, but 1996 is.\n1900 is not a leap year, but 2000 is.\n\nIf your language provides a method in the standard library that does this\nlook-up, pretend it doesn't exist and implement it yourself.\n\n## Notes\n\nFor a delightful, four minute explanation of the whole leap year phenomenon, go watch [this youtube video](http://www.youtube.com/watch?v=xX96xng7sAE).\n\n## Making the Test Suite Pass\n\nFirst [get composer](https://getcomposer.org/download/) and fetch [PHPUnit](http://phpunit.de/):\n\n```bash\n$ curl -sS https://getcomposer.org/installer | php\n$ php composer.phar install\n```\n\nExecute the tests with:\n\n```bash\n$ php vendor/bin/phpunit Trinary\n```\n\nAll but the first test have been skipped.\n\nOnce you get a test passing, you can unskip the next one by removing the `@group` annotation, e.g:\n\n```php\n/** @group skipped */\npublic function testFoo() { ... }\n```\n\nbecomes:\n\n```php\npublic function testFoo() { ... }\n```\n\n## Source\n\nJavaRanch Cattle Drive, exercise 3 [view source](http://www.javaranch.com/leap.jsp)\n"
      },
      "fresh": true
    },
    {
      "id": "php/Bowling",
      "track_id": "php",
      "slug": "Bowling",
      "files": {
        "GameTest.php": "<?php\nnamespace Exercism\\Bowling;\n\n/**\n * Translated from original source:\n * http://butunclebob.com/ArticleS.UncleBob.TheBowlingGameKata\n */\nclass GameTest extends \\PHPUnit_Framework_TestCase\n{\n    /** @var Game */\n    private $game;\n\n    public function setUp()\n    {\n        $this->game = new Game();\n    }\n\n    public function testGutterGame()\n    {\n        $this->rollMany(20, 0);\n\n        $this->assertEquals(0, $this->game->score());\n    }\n\n    /** @group skipped */\n    public function testAllOnes()\n    {\n        $this->rollMany(20, 1);\n\n        $this->assertEquals(20, $this->game->score());\n    }\n\n    /** @group skipped */\n    public function testOneSpare()\n    {\n        $this->rollSpare();\n        $this->game->roll(3);\n        $this->rollMany(17, 0);\n\n        $this->assertEquals(16, $this->game->score());\n    }\n\n    /** @group skipped */\n    public function testOneStrike()\n    {\n        $this->rollStrike();\n        $this->game->roll(3);\n        $this->game->roll(4);\n        $this->rollMany(16, 0);\n\n        $this->assertEquals(24, $this->game->score());\n    }\n\n    /** @group skipped */\n    public function testPerfectGame()\n    {\n        $this->rollMany(12, 10);\n\n        $this->assertEquals(300, $this->game->score());\n    }\n\n    private function rollStrike()\n    {\n        $this->game->roll(10);\n    }\n\n    private function rollSpare()\n    {\n        $this->rollMany(2, 5);\n    }\n\n    private function rollMany($n, $pins)\n    {\n        for ($i = 0; $i < $n; $i++) {\n            $this->game->roll($pins);\n        }\n    }\n}\n",
        "README.md": "# Bowling\n\nScore a bowling game\n\nScoring Bowling\n---------------\n\nThe game consists of 10 frames. In each frame the player has\ntwo opportunities to knock down 10 pins.  The score for the frame is the total\nnumber of pins knocked down, plus bonuses for strikes and spares.\n\nA spare is when the player knocks down all 10 pins in two tries.  The bonus for\nthat frame is the number of pins knocked down by the next roll.  So in frame 3\nabove, the score is 10 (the total number knocked down) plus a bonus of 5 (the\nnumber of pins knocked down on the next roll.)\n\nA strike is when the player knocks down all 10 pins on his first try. The bonus\nfor that frame is the value of the next two balls rolled.\n\nIn the tenth frame a player who rolls a spare or strike is allowed to roll the extra\nballs to complete the frame.  However no more than three balls can be rolled in\ntenth frame.\n\nRequirements\n------------\n\nWrite a class named “Game” that has two methods:\n\n* _roll(pins : int)_ is called each time the player rolls a ball.  The argument is the number of pins knocked down.\n* _score() : int_ is called only at the very end of the game.  It returns the total score for that game.\n\n## Making the Test Suite Pass\n\nFirst [get composer](https://getcomposer.org/download/) and fetch [PHPUnit](http://phpunit.de/):\n\n```bash\n$ curl -sS https://getcomposer.org/installer | php\n$ php composer.phar install\n```\n\nExecute the tests with:\n\n```bash\n$ php vendor/bin/phpunit Trinary\n```\n\nAll but the first test have been skipped.\n\nOnce you get a test passing, you can unskip the next one by removing the `@group` annotation, e.g:\n\n```php\n/** @group skipped */\npublic function testFoo() { ... }\n```\n\nbecomes:\n\n```php\npublic function testFoo() { ... }\n```\n\n## Source\n\nThe Bowling Game Kata at but UncleBob [view source](http://butunclebob.com/ArticleS.UncleBob.TheBowlingGameKata)\n"
      },
      "fresh": true
    }
  ]
}
