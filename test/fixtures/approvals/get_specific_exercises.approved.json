{
  "assignments": [
    {
      "track": "ruby",
      "slug": "leap",
      "files": {
        "leap_test.rb": "require 'minitest/autorun'\nrequire_relative 'year'\n\nclass YearTest < MiniTest::Unit::TestCase\n  def test_leap_year\n    assert Year.leap?(1996)\n  end\n\n  def test_non_leap_year\n    skip\n    refute Year.leap?(1997)\n  end\n\n  def test_century\n    skip\n    refute Year.leap?(1900)\n  end\n\n  def test_fourth_century\n    skip\n    assert Year.leap?(2400)\n  end\nend\n",
        "README.md": "# Leap\n\nWrite a program that will take a year and report if it is a leap year.\n\nThe tricky thing here is that a leap year occurs:\n\n```plain\non every year that is evenly divisible by 4\n  except every year that is evenly divisible by 100\n    unless the year is also evenly divisible by 400\n```\n\nFor example, 1997 is not a leap year, but 1996 is.\n1900 is not a leap year, but 2000 is.\n\nIf your language provides a method in the standard library that does this\nlook-up, pretend it doesn't exist and implement it yourself.\n\n## Notes\n\nFor a delightful, four minute explanation of the whole leap year phenomenon, go watch [this youtube video](http://www.youtube.com/watch?v=xX96xng7sAE).\n\n\n## Source\n\nJavaRanch Cattle Drive, exercise 3 [view source](http://www.javaranch.com/leap.jsp)\n"
      },
      "fresh": false,
      "readme": "Please upgrade to the latest version of the exercism command-line client. See: http://cli.exercism.io",
      "test_file": "PLEASE_UPGRADE.txt",
      "tests": "Please upgrade to the latest version of the exercism command-line client. See: http://cli.exercism.io"
    }
  ]
}
